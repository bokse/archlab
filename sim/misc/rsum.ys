.pos 0
irmovl Stack,%esp
rrmovl %esp,%ebp
irmovl ele1,%eax
pushl %eax
call rsum_list
halt
# Sample linked list
.align 4
ele1:
	.long 0x008
	.long ele2
ele2:
	.long 0x000
	.long ele3
ele3:
	.long 0xc00
	.long ele4
ele4:
	.long 0x0b0
	.long ele5
ele5:
	.long 0x000
	.long 0
rsum_list:
	pushl %ebx				#save ebx
	pushl %ebp				#push ebp
	rrmovl %esp,%ebp		#ebp = stack
	xorl %eax,%eax		    #val = 0
	mrmovl 12(%ebp),%edx		#edx = ls
	andl %edx,%edx			#ls==0? 
	je L4					#then end, otherwise recursion
	mrmovl (%edx),%ebx		#t = ls->val
	andl %ebx,%ebx			#t!=0?
	jne L6					#then L6
	irmovl $1,%ebx			#else t=1 --> t = 1 or ls->val
L6:
	mrmovl 4(%edx),%esi		#esi = ls->next
	pushl %esi				#push ls->next (as argument)
	call rsum_list
	addl %ebx, %eax			#eax = rsum_list(ls->next)+val
L4:							#while ends
	rrmovl %ebp,%esp		#load esp
	popl %ebp				#load ebp
	popl %ebx				#load ebx
	ret
.pos 0x400
Stack:


                      | #######################################################################
                      | # Test for copying block of size 63;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000:              | main:	
  0x000: 30f41c060000 |   irmovl Stack, %esp    # Set up stack pointer
  0x006: 30f51c060000 |   irmovl Stack, %ebp    # Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f03f000000 | 	irmovl $63, %eax # concatenate 63 elements from src to dst
  0x012: a00f         | 	pushl %eax
  0x014: 30f0c4030000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f0b8020000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Concatenates a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # 2014-18912 Ji Jeongwoo
                      | # Describe how and why you modified the baseline code.
                      | # Loop&Npos is executed for all element.(in original code)
                      | # Instructions of Loop is necessary. irreducible.
                      | # If we consider many block in once, instructions of Npos are only executed sometimes.
                      | # I consider 10 blocks once.
                      | # Also, reduce bubble because of consecutive mrmovl and rmmovl by using esi and edi both.
                      | #
                      | # (*) Note: Pseudo-end of array is 0xccaaff.
                      | ##################################################################
                      | # Do not modify this portion (Function Prolog)
  0x02a: a05f         | ncopy:  pushl %ebp    # Save old frame pointer
  0x02c: 2045         |   rrmovl %esp,%ebp    # Set up new frame pointer
  0x02e: a06f         |   pushl %esi          # Save callee-save regs
  0x030: a03f         |   pushl %ebx
  0x032: a07f         |   pushl %edi
  0x034: 503508000000 |   mrmovl 8(%ebp),%ebx   # src
  0x03a: 502510000000 |   mrmovl 16(%ebp),%edx  # len
  0x040: 50150c000000 |   mrmovl 12(%ebp),%ecx  # dst
                      | ##################################################################
                      | # You can modify this portion 
  0x046: 30f7ffaacc00 |   irmovl $0xccaaff,%edi # edi = pseudo-end
  0x04c: f0f104000000 |   isubl $4,%ecx
  0x052:              | Move:
  0x052: c0f104000000 |   iaddl $4,%ecx
  0x058: 506100000000 |   mrmovl (%ecx),%esi    # *dst++
  0x05e: 6376         |   xorl %edi,%esi
  0x060: 7452000000   |   jne Move              # not? goto Move
  0x065: c0f104000000 |   iaddl $4,%ecx
  0x06b: 6300         |   xorl %eax,%eax		# count=0
  0x06d:              | Loop:
  0x06d: f0f20a000000 |   isubl $10, %edx		# len<10? (len=len-10)
  0x073: 7283010000   |   jl Rest10
  0x078:              | Loop1:
  0x078: 506300000000 |   mrmovl (%ebx), %esi   # read val from src...
  0x07e: 507304000000 |   mrmovl 4(%ebx), %edi
  0x084: 406100000000 |   rmmovl %esi, (%ecx)   # ...and store it to dst
  0x08a: 6266         |   andl %esi, %esi       # val <= 0?
  0x08c: 7197000000   |   jle Loop2			# if so, goto Npos:
  0x091: c0f001000000 |   iaddl $1,%eax
  0x097:              | Loop2:
  0x097: 407104000000 |   rmmovl %edi, 4(%ecx)
  0x09d: 6277         |   andl %edi, %edi		# val<=0?
  0x09f: 71aa000000   |   jle Loop3
  0x0a4: c0f001000000 |   iaddl $1,%eax
  0x0aa:              | Loop3:
  0x0aa: 506308000000 |   mrmovl 8(%ebx), %esi
  0x0b0: 50730c000000 |   mrmovl 12(%ebx), %edi
  0x0b6: 406108000000 |   rmmovl %esi, 8(%ecx)
  0x0bc: 6266         |   andl %esi, %esi
  0x0be: 71c9000000   |   jle Loop4
  0x0c3: c0f001000000 |   iaddl $1, %eax
  0x0c9:              | Loop4:
  0x0c9: 40710c000000 |   rmmovl %edi, 12(%ecx)
  0x0cf: 6277         |   andl %edi, %edi
  0x0d1: 71dc000000   |   jle Loop5
  0x0d6: c0f001000000 |   iaddl $1, %eax
  0x0dc:              | Loop5:
  0x0dc: 506310000000 |   mrmovl 16(%ebx), %esi
  0x0e2: 507314000000 |   mrmovl 20(%ebx), %edi
  0x0e8: 406110000000 |   rmmovl %esi, 16(%ecx)
  0x0ee: 6266         |   andl %esi, %esi
  0x0f0: 71fb000000   |   jle Loop6
  0x0f5: c0f001000000 |   iaddl $1, %eax
  0x0fb:              | Loop6:
  0x0fb: 407114000000 |   rmmovl %edi, 20(%ecx)
  0x101: 6277         |   andl %edi, %edi
  0x103: 710e010000   |   jle Loop7
  0x108: c0f001000000 |   iaddl $1, %eax
  0x10e:              | Loop7:
  0x10e: 506318000000 |   mrmovl 24(%ebx), %esi
  0x114: 50731c000000 |   mrmovl 28(%ebx), %edi
  0x11a: 406118000000 |   rmmovl %esi, 24(%ecx)
  0x120: 6266         |   andl %esi, %esi
  0x122: 712d010000   |   jle Loop8
  0x127: c0f001000000 |   iaddl $1, %eax
  0x12d:              | Loop8:
  0x12d: 40711c000000 |   rmmovl %edi, 28(%ecx)
  0x133: 6277         |   andl %edi, %edi
  0x135: 7140010000   |   jle Loop9
  0x13a: c0f001000000 |   iaddl $1, %eax
  0x140:              | Loop9:
  0x140: 506320000000 |   mrmovl 32(%ebx), %esi
  0x146: 507324000000 |   mrmovl 36(%ebx), %edi
  0x14c: 406120000000 |   rmmovl %esi, 32(%ecx)
  0x152: 6266         |   andl %esi, %esi
  0x154: 715f010000   |   jle Loop10
  0x159: c0f001000000 |   iaddl $1, %eax
  0x15f:              | Loop10:
  0x15f: 407124000000 |   rmmovl %edi, 36(%ecx)
  0x165: 6277         |   andl %edi, %edi
  0x167: 7172010000   |   jle Loopfin
  0x16c: c0f001000000 |   iaddl $1, %eax
  0x172:              | Loopfin:
  0x172: c0f328000000 |   iaddl $40, %ebx
  0x178: c0f128000000 |   iaddl $40, %ecx
  0x17e: 706d000000   |   jmp Loop
                      | 
  0x183:              | Rest10:
  0x183: c0f205000000 |   iaddl $5, %edx		#len=len+5
  0x189: 721d020000   |   jl Rest51				#if len<0 -> Rest51
  0x18e:              | R11:
  0x18e: 506300000000 |   mrmovl (%ebx),%esi
  0x194: 406100000000 |   rmmovl %esi,(%ecx)
  0x19a: 6266         |   andl %esi,%esi
  0x19c: 71a7010000   |   jle R12
  0x1a1: c0f001000000 |   iaddl $1,%eax
  0x1a7:              | R12:
  0x1a7: 506304000000 |   mrmovl 4(%ebx),%esi
  0x1ad: 406104000000 |   rmmovl %esi,4(%ecx)
  0x1b3: 6266         |   andl %esi,%esi
  0x1b5: 71c0010000   |   jle R13
  0x1ba: c0f001000000 |   iaddl $1,%eax
  0x1c0:              | R13:
  0x1c0: 506308000000 |   mrmovl 8(%ebx),%esi
  0x1c6: 406108000000 |   rmmovl %esi,8(%ecx)
  0x1cc: 6266         |   andl %esi,%esi
  0x1ce: 71d9010000   |   jle R14
  0x1d3: c0f001000000 |   iaddl $1,%eax
  0x1d9:              | R14:
  0x1d9: 50630c000000 |   mrmovl 12(%ebx),%esi
  0x1df: 40610c000000 |   rmmovl %esi,12(%ecx)
  0x1e5: 6266         |   andl %esi,%esi
  0x1e7: 71f2010000   |   jle R15
  0x1ec: c0f001000000 |   iaddl $1,%eax
  0x1f2:              | R15:
  0x1f2: 506310000000 |   mrmovl 16(%ebx),%esi
  0x1f8: 406110000000 |   rmmovl %esi,16(%ecx)
  0x1fe: 6266         |   andl %esi,%esi
  0x200: 710b020000   |   jle Rest10F
  0x205: c0f001000000 |   iaddl $1,%eax
  0x20b:              | Rest10F:
  0x20b: c0f314000000 |   iaddl $20,%ebx
  0x211: c0f114000000 |   iaddl $20,%ecx
  0x217: f0f205000000 |   isubl $5,%edx
  0x21d:              | Rest51:
  0x21d: c0f204000000 |   iaddl $4, %edx
  0x223: 72ad020000   |   jl Done
  0x228: 506300000000 |   mrmovl (%ebx),%esi
  0x22e: 406100000000 |   rmmovl %esi,(%ecx)
  0x234: 6266         |   andl %esi,%esi
  0x236: 7141020000   |   jle Rest52
  0x23b: c0f001000000 |   iaddl $1,%eax
  0x241:              | Rest52:
  0x241: f0f201000000 |   isubl $1, %edx
  0x247: 72ad020000   |   jl Done
  0x24c: 506304000000 |   mrmovl 4(%ebx),%esi
  0x252: 406104000000 |   rmmovl %esi,4(%ecx)
  0x258: 6266         |   andl %esi,%esi
  0x25a: 7165020000   |   jle Rest53
  0x25f: c0f001000000 |   iaddl $1,%eax
  0x265:              | Rest53:
  0x265: f0f201000000 |   isubl $1, %edx
  0x26b: 72ad020000   |   jl Done
  0x270: 506308000000 |   mrmovl 8(%ebx),%esi
  0x276: 406108000000 |   rmmovl %esi,8(%ecx)
  0x27c: 6266         |   andl %esi,%esi
  0x27e: 7189020000   |   jle Rest54
  0x283: c0f001000000 |   iaddl $1,%eax
  0x289:              | Rest54:
  0x289: f0f201000000 |   isubl $1, %edx
  0x28f: 72ad020000   |   jl Done
  0x294: 50630c000000 |   mrmovl 12(%ebx),%esi
  0x29a: 40610c000000 |   rmmovl %esi,12(%ecx)
  0x2a0: 6266         |   andl %esi,%esi
  0x2a2: 71ad020000   |   jle Done
  0x2a7: c0f001000000 |   iaddl $1,%eax
                      | ##################################################################
                      | # Do not modify the following section of code (Function epiloge)
  0x2ad:              | Done:
  0x2ad: b07f         |   popl %edi               # Restore callee-save registers
  0x2af: b03f         |   popl %ebx
  0x2b1: b06f         |   popl %esi
  0x2b3: 2054         |   rrmovl %ebp, %esp
  0x2b5: b05f         |   popl %ebp
  0x2b7: 90           |   ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x2b8:              | End:
                      | #/* $end ncopy-ys */
  0x2b8:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x2b8:              | 	.align 4
  0x2b8:              | src:
  0x2b8: ffffffff     | 	.long -1
  0x2bc: 02000000     | 	.long 2
  0x2c0: 03000000     | 	.long 3
  0x2c4: 04000000     | 	.long 4
  0x2c8: fbffffff     | 	.long -5
  0x2cc: 06000000     | 	.long 6
  0x2d0: 07000000     | 	.long 7
  0x2d4: 08000000     | 	.long 8
  0x2d8: 09000000     | 	.long 9
  0x2dc: 0a000000     | 	.long 10
  0x2e0: 0b000000     | 	.long 11
  0x2e4: 0c000000     | 	.long 12
  0x2e8: f3ffffff     | 	.long -13
  0x2ec: 0e000000     | 	.long 14
  0x2f0: f1ffffff     | 	.long -15
  0x2f4: 10000000     | 	.long 16
  0x2f8: 11000000     | 	.long 17
  0x2fc: 12000000     | 	.long 18
  0x300: edffffff     | 	.long -19
  0x304: 14000000     | 	.long 20
  0x308: 15000000     | 	.long 21
  0x30c: eaffffff     | 	.long -22
  0x310: 17000000     | 	.long 23
  0x314: e8ffffff     | 	.long -24
  0x318: e7ffffff     | 	.long -25
  0x31c: 1a000000     | 	.long 26
  0x320: 1b000000     | 	.long 27
  0x324: e4ffffff     | 	.long -28
  0x328: e3ffffff     | 	.long -29
  0x32c: e2ffffff     | 	.long -30
  0x330: e1ffffff     | 	.long -31
  0x334: 20000000     | 	.long 32
  0x338: 21000000     | 	.long 33
  0x33c: deffffff     | 	.long -34
  0x340: 23000000     | 	.long 35
  0x344: 24000000     | 	.long 36
  0x348: 25000000     | 	.long 37
  0x34c: 26000000     | 	.long 38
  0x350: 27000000     | 	.long 39
  0x354: 28000000     | 	.long 40
  0x358: d7ffffff     | 	.long -41
  0x35c: d6ffffff     | 	.long -42
  0x360: 2b000000     | 	.long 43
  0x364: d4ffffff     | 	.long -44
  0x368: 2d000000     | 	.long 45
  0x36c: 2e000000     | 	.long 46
  0x370: 2f000000     | 	.long 47
  0x374: d0ffffff     | 	.long -48
  0x378: cfffffff     | 	.long -49
  0x37c: ceffffff     | 	.long -50
  0x380: cdffffff     | 	.long -51
  0x384: ccffffff     | 	.long -52
  0x388: cbffffff     | 	.long -53
  0x38c: caffffff     | 	.long -54
  0x390: c9ffffff     | 	.long -55
  0x394: c8ffffff     | 	.long -56
  0x398: c7ffffff     | 	.long -57
  0x39c: c6ffffff     | 	.long -58
  0x3a0: c5ffffff     | 	.long -59
  0x3a4: c4ffffff     | 	.long -60
  0x3a8: c3ffffff     | 	.long -61
  0x3ac: c2ffffff     | 	.long -62
  0x3b0: c1ffffff     | 	.long -63
  0x3b4: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x3c0:              | 	.align 16
  0x3c0:              | Predest:
  0x3c0: fadebc00     | 	.long 0xbcdefa
  0x3c4:              | dest:
  0x3c4: ccaaff00     | 	.long 0xffaacc
  0x3c8: ccaaff00     | 	.long 0xffaacc
  0x3cc: ccaaff00     | 	.long 0xffaacc
  0x3d0: ccaaff00     | 	.long 0xffaacc
  0x3d4: ccaaff00     | 	.long 0xffaacc
  0x3d8: ffaacc00     | 	.long 0xccaaff
  0x3dc: ccaaff00     | 	.long 0xffaacc
  0x3e0: ccaaff00     | 	.long 0xffaacc
  0x3e4: ccaaff00     | 	.long 0xffaacc
  0x3e8: ccaaff00     | 	.long 0xffaacc
  0x3ec: ccaaff00     | 	.long 0xffaacc
  0x3f0: ccaaff00     | 	.long 0xffaacc
  0x3f4: ccaaff00     | 	.long 0xffaacc
  0x3f8: ccaaff00     | 	.long 0xffaacc
  0x3fc: ccaaff00     | 	.long 0xffaacc
  0x400: ccaaff00     | 	.long 0xffaacc
  0x404: ccaaff00     | 	.long 0xffaacc
  0x408: ccaaff00     | 	.long 0xffaacc
  0x40c: ccaaff00     | 	.long 0xffaacc
  0x410: ccaaff00     | 	.long 0xffaacc
  0x414: ccaaff00     | 	.long 0xffaacc
  0x418: ccaaff00     | 	.long 0xffaacc
  0x41c: ccaaff00     | 	.long 0xffaacc
  0x420: ccaaff00     | 	.long 0xffaacc
  0x424: ccaaff00     | 	.long 0xffaacc
  0x428: ccaaff00     | 	.long 0xffaacc
  0x42c: ccaaff00     | 	.long 0xffaacc
  0x430: ccaaff00     | 	.long 0xffaacc
  0x434: ccaaff00     | 	.long 0xffaacc
  0x438: ccaaff00     | 	.long 0xffaacc
  0x43c: ccaaff00     | 	.long 0xffaacc
  0x440: ccaaff00     | 	.long 0xffaacc
  0x444: ccaaff00     | 	.long 0xffaacc
  0x448: ccaaff00     | 	.long 0xffaacc
  0x44c: ccaaff00     | 	.long 0xffaacc
  0x450: ccaaff00     | 	.long 0xffaacc
  0x454: ccaaff00     | 	.long 0xffaacc
  0x458: ccaaff00     | 	.long 0xffaacc
  0x45c: ccaaff00     | 	.long 0xffaacc
  0x460: ccaaff00     | 	.long 0xffaacc
  0x464: ccaaff00     | 	.long 0xffaacc
  0x468: ccaaff00     | 	.long 0xffaacc
  0x46c: ccaaff00     | 	.long 0xffaacc
  0x470: ccaaff00     | 	.long 0xffaacc
  0x474: ccaaff00     | 	.long 0xffaacc
  0x478: ccaaff00     | 	.long 0xffaacc
  0x47c: ccaaff00     | 	.long 0xffaacc
  0x480: ccaaff00     | 	.long 0xffaacc
  0x484: ccaaff00     | 	.long 0xffaacc
  0x488: ccaaff00     | 	.long 0xffaacc
  0x48c: ccaaff00     | 	.long 0xffaacc
  0x490: ccaaff00     | 	.long 0xffaacc
  0x494: ccaaff00     | 	.long 0xffaacc
  0x498: ccaaff00     | 	.long 0xffaacc
  0x49c: ccaaff00     | 	.long 0xffaacc
  0x4a0: ccaaff00     | 	.long 0xffaacc
  0x4a4: ccaaff00     | 	.long 0xffaacc
  0x4a8: ccaaff00     | 	.long 0xffaacc
  0x4ac: ccaaff00     | 	.long 0xffaacc
  0x4b0: ccaaff00     | 	.long 0xffaacc
  0x4b4: ccaaff00     | 	.long 0xffaacc
  0x4b8: ccaaff00     | 	.long 0xffaacc
  0x4bc: ccaaff00     | 	.long 0xffaacc
  0x4c0: ccaaff00     | 	.long 0xffaacc
  0x4c4: ccaaff00     | 	.long 0xffaacc
  0x4c8: ccaaff00     | 	.long 0xffaacc
  0x4cc: ccaaff00     | 	.long 0xffaacc
  0x4d0: ccaaff00     | 	.long 0xffaacc
  0x4d4: ccaaff00     | 	.long 0xffaacc
  0x4d8: ccaaff00     | 	.long 0xffaacc
  0x4dc: ccaaff00     | 	.long 0xffaacc
  0x4e0: ccaaff00     | 	.long 0xffaacc
  0x4e4: ccaaff00     | 	.long 0xffaacc
  0x4e8: ccaaff00     | 	.long 0xffaacc
  0x4ec: ccaaff00     | 	.long 0xffaacc
  0x4f0: ccaaff00     | 	.long 0xffaacc
  0x4f4: ccaaff00     | 	.long 0xffaacc
  0x4f8: ccaaff00     | 	.long 0xffaacc
  0x4fc: ccaaff00     | 	.long 0xffaacc
  0x500: ccaaff00     | 	.long 0xffaacc
  0x504: ccaaff00     | 	.long 0xffaacc
  0x508: ccaaff00     | 	.long 0xffaacc
  0x50c: ccaaff00     | 	.long 0xffaacc
  0x510: ccaaff00     | 	.long 0xffaacc
  0x514: ccaaff00     | 	.long 0xffaacc
  0x518: ccaaff00     | 	.long 0xffaacc
  0x51c: ccaaff00     | 	.long 0xffaacc
  0x520: ccaaff00     | 	.long 0xffaacc
  0x524: ccaaff00     | 	.long 0xffaacc
  0x528: ccaaff00     | 	.long 0xffaacc
  0x52c: ccaaff00     | 	.long 0xffaacc
  0x530: ccaaff00     | 	.long 0xffaacc
  0x534: ccaaff00     | 	.long 0xffaacc
  0x538: ccaaff00     | 	.long 0xffaacc
  0x53c: ccaaff00     | 	.long 0xffaacc
  0x540: ccaaff00     | 	.long 0xffaacc
  0x544: ccaaff00     | 	.long 0xffaacc
  0x548: ccaaff00     | 	.long 0xffaacc
  0x54c: ccaaff00     | 	.long 0xffaacc
  0x550: ccaaff00     | 	.long 0xffaacc
  0x554: ccaaff00     | 	.long 0xffaacc
  0x558: ccaaff00     | 	.long 0xffaacc
  0x55c: ccaaff00     | 	.long 0xffaacc
  0x560: ccaaff00     | 	.long 0xffaacc
  0x564: ccaaff00     | 	.long 0xffaacc
  0x568: ccaaff00     | 	.long 0xffaacc
  0x56c: ccaaff00     | 	.long 0xffaacc
  0x570: ccaaff00     | 	.long 0xffaacc
  0x574: ccaaff00     | 	.long 0xffaacc
  0x578: ccaaff00     | 	.long 0xffaacc
  0x57c: ccaaff00     | 	.long 0xffaacc
  0x580: ccaaff00     | 	.long 0xffaacc
  0x584: ccaaff00     | 	.long 0xffaacc
  0x588: ccaaff00     | 	.long 0xffaacc
  0x58c: ccaaff00     | 	.long 0xffaacc
  0x590: ccaaff00     | 	.long 0xffaacc
  0x594: ccaaff00     | 	.long 0xffaacc
  0x598: ccaaff00     | 	.long 0xffaacc
  0x59c: ccaaff00     | 	.long 0xffaacc
  0x5a0: ccaaff00     | 	.long 0xffaacc
  0x5a4: ccaaff00     | 	.long 0xffaacc
  0x5a8: ccaaff00     | 	.long 0xffaacc
  0x5ac: ccaaff00     | 	.long 0xffaacc
  0x5b0: ccaaff00     | 	.long 0xffaacc
  0x5b4: ccaaff00     | 	.long 0xffaacc
  0x5b8: ccaaff00     | 	.long 0xffaacc
  0x5bc: ccaaff00     | 	.long 0xffaacc
  0x5c0:              | Postdest:
  0x5c0: bcfade00     | 	.long 0xdefabc
                      | 
  0x5c4:              | .align 4
                      | # Run time stack
  0x5c4: 00000000     | 	.long 0
  0x5c8: 00000000     | 	.long 0
  0x5cc: 00000000     | 	.long 0
  0x5d0: 00000000     | 	.long 0
  0x5d4: 00000000     | 	.long 0
  0x5d8: 00000000     | 	.long 0
  0x5dc: 00000000     | 	.long 0
  0x5e0: 00000000     | 	.long 0
  0x5e4: 00000000     | 	.long 0
  0x5e8: 00000000     | 	.long 0
  0x5ec: 00000000     | 	.long 0
  0x5f0: 00000000     | 	.long 0
  0x5f4: 00000000     | 	.long 0
  0x5f8: 00000000     | 	.long 0
  0x5fc: 00000000     | 	.long 0
  0x600: 00000000     | 	.long 0
  0x604: 00000000     | 	.long 0
  0x608: 00000000     | 	.long 0
  0x60c: 00000000     | 	.long 0
  0x610: 00000000     | 	.long 0
  0x614: 00000000     | 	.long 0
  0x618: 00000000     | 	.long 0
                      | 
  0x61c:              | Stack:

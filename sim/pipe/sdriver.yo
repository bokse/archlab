                      | #######################################################################
                      | # Test for copying block of size 4;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000:              | main:	
  0x000: 30f454030000 |   irmovl Stack, %esp    # Set up stack pointer
  0x006: 30f554030000 |   irmovl Stack, %ebp    # Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f004000000 | 	irmovl $4, %eax # concatenate 4 elements from src to dst
  0x012: a00f         | 	pushl %eax
  0x014: 30f0d4020000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f0b8020000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Concatenates a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # 2014-18912 Ji Jeongwoo
                      | # Describe how and why you modified the baseline code.
                      | # Loop&Npos is executed for all element.(in original code)
                      | # Instructions of Loop is necessary. irreducible.
                      | # If we consider many block in once, instructions of Npos are only executed sometimes.
                      | # I consider 10 blocks once.
                      | # Also, reduce bubble because of consecutive mrmovl and rmmovl by using esi and edi both.
                      | #
                      | # (*) Note: Pseudo-end of array is 0xccaaff.
                      | ##################################################################
                      | # Do not modify this portion (Function Prolog)
  0x02a: a05f         | ncopy:  pushl %ebp    # Save old frame pointer
  0x02c: 2045         |   rrmovl %esp,%ebp    # Set up new frame pointer
  0x02e: a06f         |   pushl %esi          # Save callee-save regs
  0x030: a03f         |   pushl %ebx
  0x032: a07f         |   pushl %edi
  0x034: 503508000000 |   mrmovl 8(%ebp),%ebx   # src
  0x03a: 502510000000 |   mrmovl 16(%ebp),%edx  # len
  0x040: 50150c000000 |   mrmovl 12(%ebp),%ecx  # dst
                      | ##################################################################
                      | # You can modify this portion 
  0x046: 30f7ffaacc00 |   irmovl $0xccaaff,%edi # edi = pseudo-end
  0x04c: f0f104000000 |   isubl $4,%ecx
  0x052:              | Move:
  0x052: c0f104000000 |   iaddl $4,%ecx
  0x058: 506100000000 |   mrmovl (%ecx),%esi    # *dst++
  0x05e: 6376         |   xorl %edi,%esi
  0x060: 7452000000   |   jne Move              # not? goto Move
  0x065: c0f104000000 |   iaddl $4,%ecx
  0x06b: 6300         |   xorl %eax,%eax		# count=0
  0x06d:              | Loop:
  0x06d: f0f20a000000 |   isubl $10, %edx		# len<10? (len=len-10)
  0x073: 7283010000   |   jl Rest10
  0x078:              | Loop1:
  0x078: 506300000000 |   mrmovl (%ebx), %esi   # read val from src...
  0x07e: 507304000000 |   mrmovl 4(%ebx), %edi
  0x084: 406100000000 |   rmmovl %esi, (%ecx)   # ...and store it to dst
  0x08a: 6266         |   andl %esi, %esi       # val <= 0?
  0x08c: 7197000000   |   jle Loop2			# if so, goto Npos:
  0x091: c0f001000000 |   iaddl $1,%eax
  0x097:              | Loop2:
  0x097: 407104000000 |   rmmovl %edi, 4(%ecx)
  0x09d: 6277         |   andl %edi, %edi		# val<=0?
  0x09f: 71aa000000   |   jle Loop3
  0x0a4: c0f001000000 |   iaddl $1,%eax
  0x0aa:              | Loop3:
  0x0aa: 506308000000 |   mrmovl 8(%ebx), %esi
  0x0b0: 50730c000000 |   mrmovl 12(%ebx), %edi
  0x0b6: 406108000000 |   rmmovl %esi, 8(%ecx)
  0x0bc: 6266         |   andl %esi, %esi
  0x0be: 71c9000000   |   jle Loop4
  0x0c3: c0f001000000 |   iaddl $1, %eax
  0x0c9:              | Loop4:
  0x0c9: 40710c000000 |   rmmovl %edi, 12(%ecx)
  0x0cf: 6277         |   andl %edi, %edi
  0x0d1: 71dc000000   |   jle Loop5
  0x0d6: c0f001000000 |   iaddl $1, %eax
  0x0dc:              | Loop5:
  0x0dc: 506310000000 |   mrmovl 16(%ebx), %esi
  0x0e2: 507314000000 |   mrmovl 20(%ebx), %edi
  0x0e8: 406110000000 |   rmmovl %esi, 16(%ecx)
  0x0ee: 6266         |   andl %esi, %esi
  0x0f0: 71fb000000   |   jle Loop6
  0x0f5: c0f001000000 |   iaddl $1, %eax
  0x0fb:              | Loop6:
  0x0fb: 407114000000 |   rmmovl %edi, 20(%ecx)
  0x101: 6277         |   andl %edi, %edi
  0x103: 710e010000   |   jle Loop7
  0x108: c0f001000000 |   iaddl $1, %eax
  0x10e:              | Loop7:
  0x10e: 506318000000 |   mrmovl 24(%ebx), %esi
  0x114: 50731c000000 |   mrmovl 28(%ebx), %edi
  0x11a: 406118000000 |   rmmovl %esi, 24(%ecx)
  0x120: 6266         |   andl %esi, %esi
  0x122: 712d010000   |   jle Loop8
  0x127: c0f001000000 |   iaddl $1, %eax
  0x12d:              | Loop8:
  0x12d: 40711c000000 |   rmmovl %edi, 28(%ecx)
  0x133: 6277         |   andl %edi, %edi
  0x135: 7140010000   |   jle Loop9
  0x13a: c0f001000000 |   iaddl $1, %eax
  0x140:              | Loop9:
  0x140: 506320000000 |   mrmovl 32(%ebx), %esi
  0x146: 507324000000 |   mrmovl 36(%ebx), %edi
  0x14c: 406120000000 |   rmmovl %esi, 32(%ecx)
  0x152: 6266         |   andl %esi, %esi
  0x154: 715f010000   |   jle Loop10
  0x159: c0f001000000 |   iaddl $1, %eax
  0x15f:              | Loop10:
  0x15f: 407124000000 |   rmmovl %edi, 36(%ecx)
  0x165: 6277         |   andl %edi, %edi
  0x167: 7172010000   |   jle Loopfin
  0x16c: c0f001000000 |   iaddl $1, %eax
  0x172:              | Loopfin:
  0x172: c0f328000000 |   iaddl $40, %ebx
  0x178: c0f128000000 |   iaddl $40, %ecx
  0x17e: 706d000000   |   jmp Loop
                      | 
  0x183:              | Rest10:
  0x183: c0f205000000 |   iaddl $5, %edx		#len=len+5
  0x189: 721d020000   |   jl Rest51				#if len<0 -> Rest51
  0x18e:              | R11:
  0x18e: 506300000000 |   mrmovl (%ebx),%esi
  0x194: 406100000000 |   rmmovl %esi,(%ecx)
  0x19a: 6266         |   andl %esi,%esi
  0x19c: 71a7010000   |   jle R12
  0x1a1: c0f001000000 |   iaddl $1,%eax
  0x1a7:              | R12:
  0x1a7: 506304000000 |   mrmovl 4(%ebx),%esi
  0x1ad: 406104000000 |   rmmovl %esi,4(%ecx)
  0x1b3: 6266         |   andl %esi,%esi
  0x1b5: 71c0010000   |   jle R13
  0x1ba: c0f001000000 |   iaddl $1,%eax
  0x1c0:              | R13:
  0x1c0: 506308000000 |   mrmovl 8(%ebx),%esi
  0x1c6: 406108000000 |   rmmovl %esi,8(%ecx)
  0x1cc: 6266         |   andl %esi,%esi
  0x1ce: 71d9010000   |   jle R14
  0x1d3: c0f001000000 |   iaddl $1,%eax
  0x1d9:              | R14:
  0x1d9: 50630c000000 |   mrmovl 12(%ebx),%esi
  0x1df: 40610c000000 |   rmmovl %esi,12(%ecx)
  0x1e5: 6266         |   andl %esi,%esi
  0x1e7: 71f2010000   |   jle R15
  0x1ec: c0f001000000 |   iaddl $1,%eax
  0x1f2:              | R15:
  0x1f2: 506310000000 |   mrmovl 16(%ebx),%esi
  0x1f8: 406110000000 |   rmmovl %esi,16(%ecx)
  0x1fe: 6266         |   andl %esi,%esi
  0x200: 710b020000   |   jle Rest10F
  0x205: c0f001000000 |   iaddl $1,%eax
  0x20b:              | Rest10F:
  0x20b: c0f314000000 |   iaddl $20,%ebx
  0x211: c0f114000000 |   iaddl $20,%ecx
  0x217: f0f205000000 |   isubl $5,%edx
  0x21d:              | Rest51:
  0x21d: c0f204000000 |   iaddl $4, %edx
  0x223: 72ad020000   |   jl Done
  0x228: 506300000000 |   mrmovl (%ebx),%esi
  0x22e: 406100000000 |   rmmovl %esi,(%ecx)
  0x234: 6266         |   andl %esi,%esi
  0x236: 7141020000   |   jle Rest52
  0x23b: c0f001000000 |   iaddl $1,%eax
  0x241:              | Rest52:
  0x241: f0f201000000 |   isubl $1, %edx
  0x247: 72ad020000   |   jl Done
  0x24c: 506304000000 |   mrmovl 4(%ebx),%esi
  0x252: 406104000000 |   rmmovl %esi,4(%ecx)
  0x258: 6266         |   andl %esi,%esi
  0x25a: 7165020000   |   jle Rest53
  0x25f: c0f001000000 |   iaddl $1,%eax
  0x265:              | Rest53:
  0x265: f0f201000000 |   isubl $1, %edx
  0x26b: 72ad020000   |   jl Done
  0x270: 506308000000 |   mrmovl 8(%ebx),%esi
  0x276: 406108000000 |   rmmovl %esi,8(%ecx)
  0x27c: 6266         |   andl %esi,%esi
  0x27e: 7189020000   |   jle Rest54
  0x283: c0f001000000 |   iaddl $1,%eax
  0x289:              | Rest54:
  0x289: f0f201000000 |   isubl $1, %edx
  0x28f: 72ad020000   |   jl Done
  0x294: 50630c000000 |   mrmovl 12(%ebx),%esi
  0x29a: 40610c000000 |   rmmovl %esi,12(%ecx)
  0x2a0: 6266         |   andl %esi,%esi
  0x2a2: 71ad020000   |   jle Done
  0x2a7: c0f001000000 |   iaddl $1,%eax
                      | ##################################################################
                      | # Do not modify the following section of code (Function epiloge)
  0x2ad:              | Done:
  0x2ad: b07f         |   popl %edi               # Restore callee-save registers
  0x2af: b03f         |   popl %ebx
  0x2b1: b06f         |   popl %esi
  0x2b3: 2054         |   rrmovl %ebp, %esp
  0x2b5: b05f         |   popl %ebp
  0x2b7: 90           |   ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x2b8:              | End:
                      | #/* $end ncopy-ys */
  0x2b8:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x2b8:              | 	.align 4
  0x2b8:              | src:
  0x2b8: 01000000     | 	.long 1
  0x2bc: 02000000     | 	.long 2
  0x2c0: fdffffff     | 	.long -3
  0x2c4: fcffffff     | 	.long -4
  0x2c8: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x2d0:              | 	.align 16
  0x2d0:              | Predest:
  0x2d0: fadebc00     | 	.long 0xbcdefa
  0x2d4:              | dest:
  0x2d4: ccaaff00     | 	.long 0xffaacc
  0x2d8: ffaacc00     | 	.long 0xccaaff
  0x2dc: ccaaff00     | 	.long 0xffaacc
  0x2e0: ccaaff00     | 	.long 0xffaacc
  0x2e4: ccaaff00     | 	.long 0xffaacc
  0x2e8: ccaaff00     | 	.long 0xffaacc
  0x2ec: ccaaff00     | 	.long 0xffaacc
  0x2f0: ccaaff00     | 	.long 0xffaacc
  0x2f4: ccaaff00     | 	.long 0xffaacc
  0x2f8:              | Postdest:
  0x2f8: bcfade00     | 	.long 0xdefabc
                      | 
  0x2fc:              | .align 4
                      | # Run time stack
  0x2fc: 00000000     | 	.long 0
  0x300: 00000000     | 	.long 0
  0x304: 00000000     | 	.long 0
  0x308: 00000000     | 	.long 0
  0x30c: 00000000     | 	.long 0
  0x310: 00000000     | 	.long 0
  0x314: 00000000     | 	.long 0
  0x318: 00000000     | 	.long 0
  0x31c: 00000000     | 	.long 0
  0x320: 00000000     | 	.long 0
  0x324: 00000000     | 	.long 0
  0x328: 00000000     | 	.long 0
  0x32c: 00000000     | 	.long 0
  0x330: 00000000     | 	.long 0
  0x334: 00000000     | 	.long 0
  0x338: 00000000     | 	.long 0
  0x33c: 00000000     | 	.long 0
  0x340: 00000000     | 	.long 0
  0x344: 00000000     | 	.long 0
  0x348: 00000000     | 	.long 0
  0x34c: 00000000     | 	.long 0
  0x350: 00000000     | 	.long 0
                      | 
  0x354:              | Stack:
